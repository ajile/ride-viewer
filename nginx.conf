worker_processes 2;

events {
    worker_connections 2048;
}

http {
    include mime.types;
    charset utf-8;

    default_type application/octet-stream;

    gzip on;
    gzip_min_length 100;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    server {
        listen          80;
        server_name     localhost;

        access_log off;
        error_log /var/log/nginx/error.log crit;

        etag            on;

        # Если не слишком вдаваться в подробности, то обе функции позволяют отключить некоторые
        # особенности TCP, которые были актуальны в 90х, когда Интернет только набирал обороты, но
        # не имеют смысла в современных условиях. Первая директива отправляет данные, как только они
        # будут доступны (обходит алгоритм Нейгла). А вторая дает возможность отправлять заголовок
        # ответа (веб-страницы) и начало файла, ожидая заполнения пакета (то есть, включает
        # tcp_cork). Так что браузер сможет начать отображение веб-страницы раньше.
        tcp_nodelay     on;
        tcp_nopush      on;

        # На первый взгляд, функции противоречат друг другу. Поэтому директива tcp_nopush должна
        # использоваться вместе с sendfile. В этом случае пакеты будут заполнены до отправки, т.к.
        # директива работает намного быстрее и оптимальнее, чем метод read+write. После того, как
        # пакет заполнен, Nginx автоматически отключает tcp_nopush, а tcp_nodelay заставляет сокет
        # отправить данные. Включить sendfile очень просто:
        sendfile on;

        # Также не помешает закэшировать информацию о часто используемых файлах. open_file_cache
        # задает максимальное количество файлов, информация о которых будет храниться, и время
        # хранения. open_file_cache_valid задает время, после которого нужно проверить актуальность
        # информации, open_file_cache_min_uses определяет минимальное количество обращений к файлу
        # со стороны клиентов, а open_file_cache_errors включает кэширование ошибок поиска файлов.
        open_file_cache max=10000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;

        root  /var/www/html;

        location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {expires 365d;}
    }
}